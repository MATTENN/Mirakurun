/// <reference types="node" />
import * as stream from "stream";
import * as common from "./common";
import * as db from "./db";
import ChannelItem from "./ChannelItem";
import TSFilter from "./TSFilter";
export default class ServiceItem {
    private _channel;
    private _networkId;
    private _serviceId;
    private _name?;
    private _type?;
    private _logoId?;
    private _remoteControlKeyId?;
    private _epgReady;
    private _epgUpdatedAt;
    static getId(networkId: number, serviceId: number): number;
    private _id;
    constructor(_channel: ChannelItem[], _networkId: number, _serviceId: number, _name?: string, _type?: number, _logoId?: number, _remoteControlKeyId?: number, _epgReady?: boolean, _epgUpdatedAt?: number);
    get id(): number;
    get networkId(): number;
    get serviceId(): number;
    get name(): string;
    set name(name: string);
    get type(): number;
    set type(type: number);
    get logoId(): number;
    set logoId(logoId: number);
    get remoteControlKeyId(): number;
    set remoteControlKeyId(id: number);
    get epgReady(): boolean;
    set epgReady(epgReady: boolean);
    get epgUpdatedAt(): number;
    set epgUpdatedAt(time: number);
    get channel(): ChannelItem[];
    export(): db.Service;
    getStream(userRequest: common.UserRequest, output: stream.Writable): Promise<TSFilter>;
    getOrder(): number;
    private _updated;
}
